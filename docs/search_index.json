[["index.html", "PSY6422 Project Prolific anime studios prodction and rating Overview 0.1 Project motivation 0.2 Project Aims 0.3 Package requirement", " PSY6422 Project Prolific anime studios prodction and rating Halleyson Li 2021-05-24 Overview Based on the data scraped from anime-planet on June 15, 2020. Uploaded by Alan Mathew on Kaggle. The package requirement for this 0.1 Project motivation 0.2 Project Aims 0.3 Package requirement "],["understanding-the-data.html", "Part 1 Understanding the data", " Part 1 Understanding the data First let us load the data, a quick way to do is simply click the raw data folder from the files section and import. Another way is by code shows as below: library(readr) anime &lt;- read_csv(&quot;raw data/anime.csv&quot;) head(anime) ## # A tibble: 6 x 18 ## title mediaType eps duration ongoing startYr finishYr sznOfRelease ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Full… TV 64 NA FALSE 2009 2010 Spring ## 2 your… Movie 1 107 FALSE 2016 2016 &lt;NA&gt; ## 3 A Si… Movie 1 130 FALSE 2016 2016 &lt;NA&gt; ## 4 Haik… TV 10 NA FALSE 2016 2016 Fall ## 5 Atta… TV 10 NA FALSE 2019 2019 Spring ## 6 Demo… TV 26 NA FALSE 2019 2019 Spring ## # … with 10 more variables: description &lt;chr&gt;, studios &lt;chr&gt;, tags &lt;chr&gt;, ## # contentWarn &lt;chr&gt;, watched &lt;dbl&gt;, watching &lt;dbl&gt;, wantWatch &lt;dbl&gt;, ## # dropped &lt;dbl&gt;, rating &lt;dbl&gt;, votes &lt;dbl&gt; library(tidyverse) library(ggplot2) glimpse(anime) summary(anime$votes) class(anime$votes) #change all [] to NA is.na(anime) &lt;- anime == &quot;[]&quot; #set new data frame to keep the original anime1 &lt;- anime summary(anime$startYr) #removing special character gsub(&quot;&#39;&quot;, &quot;&quot;, anime1$studios) gsub(&quot;\\\\[&quot;, &quot;&quot;, anime1$studios) gsub(&quot;\\\\]&quot;, &quot;&quot;, anime1$studios) #Froming a table of studio and the amount of production studio &lt;- aggregate(anime$studios, by = list(anime$studios), FUN = length) colnames(studio) &lt;- c(&quot;studios&quot;, &quot;production&quot;) #set Na to 0 anime1$rating[is.na(anime1$rating)] &lt;- 0 anime1$studios[is.na(anime1$studios)] &lt;- 0 # create overall average rating of each studio studiorate &lt;- aggregate(anime1[, 17], list(anime1$studios), mean) colnames(studiorate) &lt;- c(&quot;studios&quot;, &quot;rating&quot;) #merge two table studioall &lt;- merge(studio,studiorate, by = &quot;studios&quot;, all = TRUE) #only keep top 50 production studios library(data.table) #need this package to use piping library (dplyr) studiotop50 &lt;- data.table(studioall, key = &quot;production&quot;) studiotop50 &lt;- studiotop50 %&gt;% arrange(desc(production)) %&gt;% slice (1:50) studio1959_2020 &lt;- ggplot(data = studiotop50, mapping = aes(x = production, y = reorder (studios, production))) + geom_point(aes(size = rating, colour = rating, check_overlap = TRUE)) + geom_text(aes(label = sprintf(&quot;%.2f&quot;,rating),hjust = -0.5),frontface=&quot;bold&quot;) ## Warning: Ignoring unknown aesthetics: check_overlap ## Warning: Ignoring unknown parameters: frontface plot &lt;- studio1959_2020 + scale_x_discrete(guide = guide_axis(n.dodge = 5)) + scale_x_continuous(&quot;Number of Total Production&quot;) + theme(axis.text.y = element_text(size = 12, face = &quot;bold&quot;), axis.title.x = element_text(size = 12, face = &quot;bold&quot;), axis.text.x = element_text(size = 12, face = &quot;bold&quot;)) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. print(plot + labs(y = &quot;Studio Name&quot;)) studio1959_2020c &lt;- ggplot(data = studiotop50, mapping = aes(x = rating, y = reorder (studios, rating))) + geom_point(aes(size = production, colour = rating, check_overlap = TRUE)) + geom_text(aes(label = production),hjust = -0.5) + geom_text(aes(label = sprintf(&quot;%.2f&quot;,rating),hjust = +1.5)) ## Warning: Ignoring unknown aesthetics: check_overlap plot1 &lt;- studio1959_2020c + scale_x_discrete(guide = guide_axis(n.dodge = 5)) + scale_x_continuous(&quot;Average rating&quot;) + theme(axis.text.y = element_text(size = 12, face = &quot;bold&quot;), axis.title.x = element_text(size = 12, face = &quot;bold&quot;), axis.text.x = element_text(size = 12, face = &quot;bold&quot;)) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. print(plot1+labs(y = &quot;Studio Name&quot;)) Since the first recorded studio starting at 1958, thus summary(studiotop50$rating) studiotop37r &lt;- studiotop50 %&gt;% arrange(desc(rating)) %&gt;% #after looking at the code, find out how many is below the 2.75 lower quartile slice (1:37) selectstudio &lt;- anime1 %&gt;% select(title, startYr, studios, rating) selectstudioall &lt;- merge(studiotop37r, selectstudio,by = &quot;studios&quot;, all = TRUE) selectstudioclean &lt;- na.omit(selectstudioall) colnames(selectstudioclean) &lt;- c(&quot;studios&quot;, &quot;production&quot;,&quot;avg_rating&quot;,&quot;title&quot;,&quot;startyr&quot;,&quot;rating&quot;) newavg &lt;- selectstudioclean %&gt;% select(studios, rating, production, avg_rating,startyr) newavg1 &lt;- aggregate(newavg[, 2:4], list(newavg$studios, newavg$startyr), mean) colnames(newavg1) &lt;- c(&quot;studios&quot;,&quot;startyr&quot;,&quot;rating&quot;, &quot;production&quot;,&quot;avg_rating&quot;) summary(selectstudioclean) ## studios production avg_rating title ## Length:4857 Min. : 42.0 Min. :2.756 Length:4857 ## Class :character 1st Qu.: 99.0 1st Qu.:2.864 Class :character ## Mode :character Median :229.0 Median :3.196 Mode :character ## Mean :265.9 Mean :3.148 ## 3rd Qu.:339.0 3rd Qu.:3.276 ## Max. :683.0 Max. :3.661 ## startyr rating ## Min. :1956 Min. :0.000 ## 1st Qu.:1999 1st Qu.:2.732 ## Median :2008 Median :3.322 ## Mean :2005 Mean :3.166 ## 3rd Qu.:2014 3rd Qu.:3.852 ## Max. :2022 Max. :4.702 library(gganimate) library(av) #create ranking list newavg2 &lt;- newavg1 %&gt;% group_by(startyr)%&gt;% arrange(startyr, - rating)%&gt;% mutate(ranking = 1:n()) #Drop row that the year is above 2020. newavg2 &lt;-newavg2 [!(newavg2$startyr == &quot;2021&quot;|newavg2$startyr == &quot;2022&quot;),] top1 &lt;- ggplot(newavg2, aes(ranking, group = studios, fill = as.factor(studios), color = as.factor(studios))) + geom_tile(aes(y = rating, height = rating, width = 0.9), alpha = 0.8, color = NA) + geom_text(aes(y = 0, label = paste(studios, &quot; &quot;)), vjust = 0.5, hjust = 0.5, size = 6, fontface=&quot;bold&quot;) + geom_text(aes(y=rating,label = round(rating, digits = 1)), colour = &quot;black&quot;, hjust=1) + coord_flip(clip = &quot;off&quot;, expand = FALSE) + scale_y_continuous(labels = scales::comma) + scale_x_reverse() + guides(color = FALSE, fill = FALSE) + theme(axis.line=element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position=&quot;none&quot;, panel.background=element_blank(), panel.border=element_blank(), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.x = element_line( size=.1, color=&quot;grey&quot; ), panel.grid.minor.x = element_line( size=.1, color=&quot;grey&quot; ), plot.title=element_text(size=25, hjust=0.5, face=&quot;bold&quot;, colour=&quot;grey&quot;, vjust=1), plot.subtitle=element_text(size=17, hjust=0.5, face=&quot;italic&quot;, color=&quot;grey&quot;), plot.caption =element_text(size=8, hjust=0.5, face=&quot;italic&quot;, color=&quot;grey&quot;), plot.background=element_blank(), plot.margin = margin(2,2, 2, 4, &quot;cm&quot;)) anim = top1 + transition_states(startyr, transition_length = 4, state_length = 1) + view_follow(fixed_x = TRUE) + labs(title = &#39;Studio average rating change by year : {closest_state}&#39;, subtitle = &quot;Top 37 Studio racing plot&quot;) anime.gif &lt;- animate(anim, nframes = 150, fps = 2.5, width = 1000, height = 1200) anime.gif topcompany &lt;- ggplot(data=newavg2,aes (x = studios, y = rating, fill = rating))+ geom_bar(stat = &#39;identity&#39;,size = 6, fontface=&quot;bold&quot;)+ geom_text(aes(label=format(round(rating)), y=rating, hjust = -1), position=position_dodge(1)) + coord_flip()+ scale_fill_gradient(low = &#39;grey39&#39;, high = &#39;cyan&#39;)+ scale_y_continuous(&quot;rating&quot;) + theme_classic()+ theme(legend.position=&#39;none&#39;, axis.text.y = element_text(size = 10, face = &quot;bold&quot;), plot.subtitle = element_text(size = 15, hjust = 1, vjust = -2, face = &quot;bold&quot;))+ transition_states(states=startyr, transition_length=4, state_length = 1) + ease_aes(&#39;cubic-in-out&#39;) + labs (subtitle = &#39;Year:{closest_state}&#39;)+ labs(x=&#39;Studio name&#39;) #nframes = 2 x length of the showing year (startyr) other wise only show 50 anime1.gif &lt;- animate (topcompany, nframes = 150, fps = 2, width = 600, height = 800) anime1.gif With the use of R "],["basic-interpretation.html", "Part 2 Basic interpretation", " Part 2 Basic interpretation This section gives a general view of the data. "],["methods.html", "Part 3 Methods", " Part 3 Methods We describe our methods in this chapter. "],["applications.html", "Part 4 Applications 4.1 Example one 4.2 Example two", " Part 4 Applications Some significant applications are demonstrated in this chapter. 4.1 Example one 4.2 Example two "],["summary.html", "Part 5 Summary", " Part 5 Summary We have finished a nice book. "]]
